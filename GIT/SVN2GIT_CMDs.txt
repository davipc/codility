This list contains the mapping from SVN to GIT commands


SVN						GIT
--------------------------------------------------------------
checkout				git clone <url> [new dir name]

share					(on github) create new repository for the project, then get it's URL (click on "Copy to clipboard" button beside HTTPS URL - example: https://github.com/davipc/codility.git)
						(from inside dir) git init
						git add .
						git commit -m "first version"
						git remote add origin <remote URL>
						 
list uncommitted		git status 
changes

commit					git add <filenames>, then
						git commit -m "<commit msgs>", then
						git push origin master (indicates remote name and branch to commit to)
						 
revert					when not committed yet => git checkout <filenames>
(overwrite local)		when already committed => git checkout HEAD <filenames>

update					git pull origin master (indicates remote name from which to fetch)

synchronize				[here's the closest to SVN's synchronize]
						[fetch the changes from the remote (incoming)]
						git fetch origin
						git log --oneline master..origin/master (shows the commits made to remote and not to the local repository)
						git diff master..origin/master (shows the file content differences from remote to committed local)
						git diff origin/master..master (shows the file content differences from committed local to remote)
						// applies changes from remote to local
						git merge origin/master (pulls the changes on remote to working copy)
						// pushes committed changes from local to remote
						git push origin master (indicates remote name and branch to commit to)
												 			
ignore file				[create ignore file and add to it]
						create file .gitignore on root repository folder (same level as .git)
						add *.class to the file contents (first line)
						commit and push the file (so others cloning this repository will get this ignore file as well)
						
						[if files were already loaded into the repository - for instance, .class files - need to manually stop tracking them]
						git rm -r --cached <filename or format, for instance *.class>
						
		
